anova(lm2)
anova(movies$box.office,movies$running.time)
?anova
anova(lm(movies$box.office~movies$running.time)
)
plot(movies$box.office,movies$running.time)
plot(movies$box.office,movies$score)
plot(movies$box.office,movies$running.time)
anova(lm2)
plot(movies$running.time,movies$box.office)
boxCut<-subset(movies,running.time<200)
lm3<-lm(boxCut$score~boxCut$box.office+boxCut$running.time)
summary(lm3)
summary(lm2)
lm2<-lm(movies$score~movies$box.office+movies$running.time)
summary(lm2)
lm3<-lm(movies$score~movies$box.office+movies$running.time)
summary(movies)
lm3<-lm(movies$score~movies$movie.rating+movies$running.time)
lm3<-lm(movies$score~movies$rating+movies$running.time)
summary(lm3)
lm3<-lm(movies$score~movies$rating+movies$running.time+movies$rating*movies$running.time)
summary(lm3)
lm3<-lm(movies$score~movies$rating+movies$running.time+movies$rating*movies$running.time)
lm3<-lm(movies$score~movies$rating+movies$running.time+movies$running.time*movies$rating)
summary(lm3)
x<-1.1852-.6901
x
data(warpbreaks)
names(warpbreaks)
lm5<-lm(warpbreaks$breaks~warpbreaks$tension)
summary(lm5)
?confint()
confint(lm5, level=.95)
confint(lm5, level=.925)
x<-21.92-17.19
x
x<-22.672-17.95
x
confint(lm5, level=.975)
-23.86+19.146
19.145+.0853-(23.868+5.576)
summary(lm2)
confint(lm2,level=.9)
confint(lm1,level=.9)
q()
dir()
setwd("C:\Users\tobias_crabtree\Dropbox\R")
setwd("C:/Users/tobias_crabtree/Dropbox/R")
dir()
data <- read.csv("Corporate_Ratings_Scores_20140206.csv")
head(data)
summary(data$Competitive.position)
summary(data$Anchor)
install.packages("tree")
library(tree)
require(tree)
head(data)
treeData <- tree(Long.term.corporate.credit.rating ~ .-Company .-Anchor)
treeData <- tree(Long.term.corporate.credit.rating ~ .-Company .-Anchor, data=data)
treeData <- tree(Long.term.corporate.credit.rating~ .-Company .-Anchor, data=data)
treeData <- tree(Long.term.corporate.credit.rating~ .-Anchor, data=data)
treeData <- tree(Long.term.corporate.credit.rating~ .-Anchor .-Long.term.corporate.credit.rating, data=data)
data$Long.term.corporate.credit.rating
str(data$Long.term.corporate.credit.rating)
treeData <- tree(Long.term.corporate.credit.rating~ .-Anchor .-Company, data=data)
treeData <- tree(Long.term.corporate.credit.rating~ .-Company, data=data)
treeData <- tree(Long.term.corporate.credit.rating~ .-Company, data=data)
str(Data)
str(data)
summary(data$Modifiers.active)
treeData <- tree(Long.term.corporate.credit.rating~ .-Company, .-Anchor, .-Modifiers.active, data=data)
treeData <- tree(Long.term.corporate.credit.rating~ .-Company, .-Anchor, .-Modifiers.active, data=data)
str(treeData)
str(data)
treeData <- tree(Long.term.corporate.credit.rating~ .-Company, .-Anchor, .-Modifiers.active., data=data)
treeData <- tree(Long.term.corporate.credit.rating~ .-Company .-Anchor, data=data)
treeData <- tree(Long.term.corporate.credit.rating~ .-Company -Anchor, data=data)
treeData <- tree(Long.term.corporate.credit.rating~ .-Company -Anchor -Modifiers.active., data=data)
str(data)
treeData <- tree(Long.term.corporate.credit.rating~ .-Company -Anchor -Modifiers.active. -Industry, data=data)
summary(treeData)
plot(cv.tree(treeData, K=10, method="misclass"))
plot(treeData)
text(treeData, cex=0.75)
text(treeData, cex=0.5)
plot(treeData)
title(main="Pruned Tree for Ratings")
text(treeData, cex=0.5)
plot(treeData)
title(main="Pruned Tree for Ratings")
text(treeData, cex=0.75)
data <- read.csv("Corporate_Ratings_Scores_20140206.csv")
str(data)
summary(data$Anchor)
treeData <- tree(Long.term.corporate.credit.rating~
.-Company -Anchor -Modifiers.active. -Industry, data=data)
plot(cv.tree(treeData, K=10, method="misclass"))
## plot figure
plot(treeData)
title(main="Pruned Tree for Ratings")
text(treeData, cex=0.75)
treeData <- tree(Long.term.corporate.credit.rating~
.-Company -Anchor -Modifiers.active. -Industry, data=data)
plot(cv.tree(treeData, K=16, method="misclass"))
## plot figure
plot(treeData)
title(main="Pruned Tree for Ratings")
text(treeData, cex=0.75)
plot(cv.tree(treeData, K=16, method="misclass"))
plot(cv.tree(treeData, K=10, method="misclass"))
str(data)
## Predicting Ratings
## Data from Standard & Poor's Ratings Services as of Feb. 6, 2014
data <- read.csv("Corporate_Ratings_Scores_20140206.csv")
## install tree package with additional dependency
install.packages("tree")
require(tree)
treeData <- tree(Long.term.corporate.credit.rating~
.-Company -Anchor -Modifiers.active. -Industry, data=data)
plot(cv.tree(treeData, K=10, method="misclass"))
## plot figure
plot(treeData)
title(main="Pruned Tree for Ratings")
text(treeData, cex=0.75)
install.packages("tree")
## Predicting Ratings
## Data from Standard & Poor's Ratings Services as of Feb. 6, 2014
data <- read.csv("Corporate_Ratings_Scores_20140206.csv")
## install tree package with additional dependency
require(tree)
treeData <- tree(Long.term.corporate.credit.rating~
.-Company -Anchor -Modifiers.active. -Industry, data=data)
plot(cv.tree(treeData, K=10, method="misclass"))
## plot figure
plot(treeData)
title(main="Pruned Tree for Ratings")
text(treeData, cex=0.75)
?text
plot(treeData)
title(main="Pruned Tree for Ratings")
text(treeData, cex=0.75, use.n=TRUE)
plot(treeData)
title(main="Pruned Tree for Ratings")
text(treeData, cex=0.75, use.n=TRUE, all=TRUE)
plot(treeData)
title(main="Pruned Tree for Ratings")
text(treeData, cex=0.75, use.n=TRUE)
n <- nrow(data)
y <- n/2
z <- n/2+1
s <- sample(1:nrow(data),nrow(data), replace=FALSE)
s <- s[1:y]
t <- s[z:n]
trainData <- data[s,]
testData <- data[t,]
nrow(trainData)
nrow(testData)
last(trainData)
tail(trainData)
tail(testData)
summary(testData)
z
n
t
s
t <- 1-s
t
t <- s[z:n]
t
t <- s[1377:n]
t
split <- function(dataframe, seed=NULL) {
if(!is.null(seed)) set.seed(seed)
train <- 1:nrow(data)
trainData <- dataframe[train,]
testData <- dataframe[-train,]
list(trainData=trainData,testData=testData)
}
nrow(testData)
nrow(trainData)
tail(testData)
tail(trainData)
tail(testData)
?split
s <- split(data, data$Region)
s
library(caret)
trainData <- createDataPartition(data$Region, p=0.5, list=FALSE, times=1)
trainIndex <- createDataPartition(data$Region, p=0.5, list=FALSE, times=1)
trainIndex <- createDataPartition(data$Region, p=0.5, list=FALSE, times=1)
trainData <- data[trainIndex,]
testData <- data[-trainIndex,]
tail(testData)
tail(trainData)
nrow(trainData)
nrow(testData)
## split data train test sets
trainIndex <- createDataPartition(data$Region, p=0.5, list=FALSE, times=1)
trainData <- data[trainIndex,]
testData <- data[-trainIndex,]
## build tree on train set
treeData <- tree(Long.term.corporate.credit.rating~
.-Company -Anchor -Modifiers.active. -Industry, data=trainData)
plot(cv.tree(treeData, K=10, method="misclass"))
## build tree on train set
treeData <- tree(Long.term.corporate.credit.rating~
.-Company -Anchor -Modifiers.active. -Industry, data=trainData)
plot(cv.tree(treeData, K=10, method="misclass"))
## prune tree
treePrune<- prune.tree(treeData, best=11)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## calculate accuracy
train.answers <- trainData$activity
nright = table(train.answers == trainPredictions)
100 * nright["TRUE"]/ sum(nright)
test.answers <- testData$activity
nright = table(test.answers == testPredictions)
100 * nright["TRUE"]/ sum(nright)
## calculate accuracy
train.answers <- trainData$Long.term.corporate.credit.rating
nright = table(train.answers == trainPredictions)
100 * nright["TRUE"]/ sum(nright)
test.answers <- testData$Long.term.corporate.credit.rating
nright = table(test.answers == testPredictions)
100 * nright["TRUE"]/ sum(nright)
## prune tree
treePrune<- prune.tree(treeData, best=11)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## calculate accuracy
train.answers <- trainData$Long.term.corporate.credit.rating
nright = table(train.answers == trainPredictions)
100 * nright["TRUE"]/ sum(nright)
test.answers <- testData$Long.term.corporate.credit.rating
nright = table(test.answers == testPredictions)
100 * nright["TRUE"]/ sum(nright)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
=262/(262+11+51+2)
262/(262+11+51+2)
=48/(53+48+6+1)
48/(53+48+6+1)
98/(98+48+2+20)
=80/(34+80+3+2+7+1+1)
80/(34+80+3+2+7+1+1)
## prune tree
treePrune<- prune.tree(treeData, best=12)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
plot(cv.tree(treeData, K=10, method="misclass"))
plot(cv.tree(treeData, K=20, method="misclass"))
plot(cv.tree(treeData, K=10, method="misclass"))
treePrune<- prune.tree(treeData, best=5)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=8)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=16)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=20)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=10)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
plot(cv.tree(treeData, K=10, method="misclass"))
treePrune<- prune.tree(treeData, best=6)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=7)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=8)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=9)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=10)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=11)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
head(data)
str(data)
summary(data$Modifiers.active)
setwd("~/Documents/RepData_PeerAssessment1")
read.csv("activity.csv")
data <- read.csv("activity.csv")
str(data)
head(dat)
head(data)
summary(data)
?As.date
?as.date
?as.Date
data$data <- as.Date("%Y-%m-%d"")
)
data$date <- as.Date("%Y-%m%d")
data$date <- as.Date("%Y-%m-%d")
str(data)
dates <- as.Date(data,"%Y-%m-%d")
dates <- as.Date(data$date,"%Y-%m-%d")
dates
str(dates)
data$date <- as.Date(data$date,"%Y-%m-%d")
str(data)
summary(data)
?read.csv
data <- read.csv("activity.csv") #read data
summary(data) # review data
data$date <- as.Date(data$date,"%Y-%m-%d") # transform dates
data <- na.omit(data)
summary(data)
str(data)
mean(data$steps) # calculate mean steps
median(data$steps) # calculate median steps
?hist
plot(hist(data$steps))
plot(hist(data$steps, breaks=data$date))
plot(hist(data$steps, breaks=1)
)
plot(hist(data$steps, breaks=24))
?hist
plot(density(data$steps))
d<-density(data$steps)
plot(d)
boxplot(data$steps)
histogram( ~ steps, data=data)
library(lattice)
histogram( ~ steps, data=data)
plot(hist(data$steps))
?hist
plot(hist(data$steps))
plot(hist(data$steps, main="Total number of steps taken by day"))
plot(hist(data$steps, title="Total number of steps taken by day"))
hist(data$steps, main="Total number of steps taken by day")
hist(data$steps, main="Total number of steps taken by day", break=data$date)
str(data)
?hist
hist(data$steps, main="Total number of steps taken by day", freq=data$date)
hist(data$steps, main="Total number of steps taken by day")
?sum
?sumif
?if
?
require(plyr)
dataSum <- ddply(data, .(date), summarize, total=sum(steps))
hist(dataSum, main="Total number of steps taken by day")
plot(dataSum, main="Total number of steps taken by day")
hist(dataSum, main="Total number of steps taken by day")
dataSum
head(dataSum)
hist(dataSum$total, main="Total number of steps taken by day")
nrow(dataSum)
hist(dataSum$total, main="Total number of steps taken by day", breaks=53)
?hist
hist(dataSum$total, main="Total number of steps taken by day", breaks=dataSum$date)
summary(dataSum)
table(dataSum)
dataSum
hist(dataSum$total, main="Total number of steps taken by day")
hist(dataSum$total, main="Total number of steps taken by day", breaks=100)
hist(dataSum$total, main="Total number of steps taken by day", breaks=25)
hist(dataSum$total, main="Total number of steps taken by day", breaks=53)
hist(dataSum$total, main="Total number of steps taken by day", breaks=54)
hist(dataSum$total, main="Total number of steps taken by day", breaks=55)
hist(dataSum$total, main="Total number of steps taken by day", breaks=nrow(dataSum))
hist(dataSum$total, main="Total number of steps taken by day", breaks=100
)
hist(dataSum$total, main="Total number of steps taken by day")
hist(dataSum$total, main="Total number of steps taken by day", breaks=nrow(dataSum))
hist(dataSum$total, main="Total number of steps taken by day")
hist(dataSum$total, main="Total number of steps taken by day", xlab="# of steps")
hist(dataSum$total, main="Total number of steps taken by day", xlab="Number of steps")
mean(dataSum$total) # calculate mean steps by day
hist(dataSum$total, main="Total number of steps taken by day", xlab="Number of steps", breaks=nrow(dataSum))
hist(dataSum$total, main="Total number of steps taken by day", xlab="Number of steps", breaks=10)
hist(dataSum$total, main="Total number of steps taken by day", xlab="Number of steps", breaks=20)
hist(dataSum$total, main="Total number of steps taken by day", xlab="Number of steps")
dataMean <- ddply(data, .(date), summarize, mean=mean(steps)) # calculate mean steps by day
dataMean <- ddply(data, .(date), summarize, mean=mean(steps)) # calculate mean steps by day
dataMedian <- ddply(data, .(date), summarize, median=median(steps)) # calculate mean steps by day
dataMean
dataMedian
