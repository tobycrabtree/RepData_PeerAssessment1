## Data from Standard & Poor's Ratings Services as of Feb. 6, 2014
data <- read.csv("Corporate_Ratings_Scores_20140206.csv")
## install tree package with additional dependency
require(tree)
treeData <- tree(Long.term.corporate.credit.rating~
.-Company -Anchor -Modifiers.active. -Industry, data=data)
plot(cv.tree(treeData, K=10, method="misclass"))
## plot figure
plot(treeData)
title(main="Pruned Tree for Ratings")
text(treeData, cex=0.75)
?text
plot(treeData)
title(main="Pruned Tree for Ratings")
text(treeData, cex=0.75, use.n=TRUE)
plot(treeData)
title(main="Pruned Tree for Ratings")
text(treeData, cex=0.75, use.n=TRUE, all=TRUE)
plot(treeData)
title(main="Pruned Tree for Ratings")
text(treeData, cex=0.75, use.n=TRUE)
n <- nrow(data)
y <- n/2
z <- n/2+1
s <- sample(1:nrow(data),nrow(data), replace=FALSE)
s <- s[1:y]
t <- s[z:n]
trainData <- data[s,]
testData <- data[t,]
nrow(trainData)
nrow(testData)
last(trainData)
tail(trainData)
tail(testData)
summary(testData)
z
n
t
s
t <- 1-s
t
t <- s[z:n]
t
t <- s[1377:n]
t
split <- function(dataframe, seed=NULL) {
if(!is.null(seed)) set.seed(seed)
train <- 1:nrow(data)
trainData <- dataframe[train,]
testData <- dataframe[-train,]
list(trainData=trainData,testData=testData)
}
nrow(testData)
nrow(trainData)
tail(testData)
tail(trainData)
tail(testData)
?split
s <- split(data, data$Region)
s
library(caret)
trainData <- createDataPartition(data$Region, p=0.5, list=FALSE, times=1)
trainIndex <- createDataPartition(data$Region, p=0.5, list=FALSE, times=1)
trainIndex <- createDataPartition(data$Region, p=0.5, list=FALSE, times=1)
trainData <- data[trainIndex,]
testData <- data[-trainIndex,]
tail(testData)
tail(trainData)
nrow(trainData)
nrow(testData)
## split data train test sets
trainIndex <- createDataPartition(data$Region, p=0.5, list=FALSE, times=1)
trainData <- data[trainIndex,]
testData <- data[-trainIndex,]
## build tree on train set
treeData <- tree(Long.term.corporate.credit.rating~
.-Company -Anchor -Modifiers.active. -Industry, data=trainData)
plot(cv.tree(treeData, K=10, method="misclass"))
## build tree on train set
treeData <- tree(Long.term.corporate.credit.rating~
.-Company -Anchor -Modifiers.active. -Industry, data=trainData)
plot(cv.tree(treeData, K=10, method="misclass"))
## prune tree
treePrune<- prune.tree(treeData, best=11)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## calculate accuracy
train.answers <- trainData$activity
nright = table(train.answers == trainPredictions)
100 * nright["TRUE"]/ sum(nright)
test.answers <- testData$activity
nright = table(test.answers == testPredictions)
100 * nright["TRUE"]/ sum(nright)
## calculate accuracy
train.answers <- trainData$Long.term.corporate.credit.rating
nright = table(train.answers == trainPredictions)
100 * nright["TRUE"]/ sum(nright)
test.answers <- testData$Long.term.corporate.credit.rating
nright = table(test.answers == testPredictions)
100 * nright["TRUE"]/ sum(nright)
## prune tree
treePrune<- prune.tree(treeData, best=11)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## calculate accuracy
train.answers <- trainData$Long.term.corporate.credit.rating
nright = table(train.answers == trainPredictions)
100 * nright["TRUE"]/ sum(nright)
test.answers <- testData$Long.term.corporate.credit.rating
nright = table(test.answers == testPredictions)
100 * nright["TRUE"]/ sum(nright)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
=262/(262+11+51+2)
262/(262+11+51+2)
=48/(53+48+6+1)
48/(53+48+6+1)
98/(98+48+2+20)
=80/(34+80+3+2+7+1+1)
80/(34+80+3+2+7+1+1)
## prune tree
treePrune<- prune.tree(treeData, best=12)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
plot(cv.tree(treeData, K=10, method="misclass"))
plot(cv.tree(treeData, K=20, method="misclass"))
plot(cv.tree(treeData, K=10, method="misclass"))
treePrune<- prune.tree(treeData, best=5)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=8)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=16)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=20)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=10)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
plot(cv.tree(treeData, K=10, method="misclass"))
treePrune<- prune.tree(treeData, best=6)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=7)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=8)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=9)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=10)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=11)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
head(data)
str(data)
summary(data$Modifiers.active)
setwd("~/Documents/RepData_PeerAssessment1")
data <- read.csv("activity.csv") #read data
summary(data) # review data
data$date <- as.Date(data$date,"%Y-%m-%d") # transform dates
data <- na.omit(data) # remove missing data
```{r fig.width=7, fig.height=6}
require(plyr) # load required plyr package
dataSum <- ddply(data, .(date), summarize, total=sum(steps))
hist(dataSum$total, main="Total number of steps taken by day", xlab="Number of steps")
```
summary(data$steps)
summary(dataSum$steps)
head(dataSum)
summary(dataSum)
require(plyr) # load required plyr package
dataMean <- ddply(data, .(date), summarize, mean=mean(steps)) # calculate mean steps by day
dataMedian <- ddply(data, .(date), summarize, median=median(steps)) # calculate mean steps by day
summary(dataMea)
summary(dataMean)
head(dataMean)
subset(dataSum, date="2012-10-02)
)
subset(dataSum, date="2012-10-02")
head(dataSum)
head(dataMean)
nrow(data)
nrow(dataSum)
126/53
data$steps
summary(data)
?subset
day1 <- subset(data, data=="2012-10-02")
day1
summary(day1)
summary(day1, as.na=FALSE)
```{r}
data <- read.csv("activity.csv") #read data
summary(data) # review data
data$date <- as.Date(data$date,"%Y-%m-%d") # transform dates
data <- na.omit(data) # remove missing data
```
```{r fig.width=7, fig.height=6}
require(plyr) # load required plyr package
dataSum <- ddply(data, .(date), summarize, total=sum(steps))
hist(dataSum$total, main="Total number of steps taken by day", xlab="Total number of steps by day")
```
```{r}
data <- read.csv("activity.csv") #read data
summary(data) # review data
data$date <- as.Date(data$date,"%Y-%m-%d") # transform dates
data <- na.omit(data) # remove missing data
```
day <- subset(data, date==2012-10-01)
summary(day$steps)
day
day <- subset(data, date=="2012-10-01")
nrow(day)
day
head(data)
summary(data)
day <- subset(data, date=="2012-10-02")
day
head(day)
summary(day)
dataMean
dataMean
dataMean
r dataMean
source('~/.active-rstudio-document', echo=TRUE)
```{r fig.width=7, fig.height=6}
require(plyr) # load required plyr package
dataSum <- ddply(data, .(date), summarize, total=sum(steps))
hist(dataSum$total, main="Total number of steps taken by day", xlab="Total number of steps by day")
dataMean <- ddply(data, .(date), summarize, mean=mean(steps)) # calculate mean steps by day
dataMedian <- ddply(data, .(date), summarize, median=median(steps)) # calculate mean steps by day
```
?plot
head(dataSum)
plot(dataSum$total, main="Total number of steps taken by day", xlab="Total number of steps by day")
plot(dataSum$total, type=l, main="Total number of steps taken by day", xlab="Total number of steps by day")
plot(dataSum$total, type="l"", main="Total number of steps taken by day", xlab="Total number of steps by day")
dataSum$total
?pot
?plot
head(dataSum)
plot(dataSum$total, dataSum$date, type="l"", main="Total number of steps taken by day", xlab="Total number of steps by day")
plot(dataSum$date, dataSum$total, type="l"")
plot(dataSum$date, dataSum$total, type="l")
plot(dataSum$total, dataSum$date, type="l")
plot(dataSum$date, dataSum$total, type="l")
plot(dataSum$date, dataSum$total, type="l", main="Average Daily # of Steps",
xlab="Day", ylab="Total Steps")
dataMean <- ddply(data, .(date), summarize, mean=mean(steps)) # calculate mean steps by day
plot(dataMean$date, dataMean$total, type="l", main="Average Daily # of Steps",
xlab="Day", ylab="Total Steps")
plot(dataMean$total, dataMean$date, type="l", main="Average Daily # of Steps",
plot(dataMean$total, dataMean$date, type="l", main="Average Daily # of Steps",
xlab="Day", ylab="Total Steps")
plot(dataMean$total, dataMean$date, type="l", main="Average Daily # of Steps",
xlab="Day", ylab="Total Steps")
head(dataMean)
dataMean <- ddply(data, .(date), summarize, mean=mean(steps)) # calculate mean steps by day
plot(dataMean$mean, dataMean$date, type="l", main="Average Daily # of Steps",
xlab="Day", ylab="Total Steps")
plot(dataMean$date, dataMean$mean, type="l", main="Average Daily # of Steps",
xlab="Day", ylab="Total Steps")
head(data, nrow=15)
dataMeanInt <- ddply(data, .(interval), summarize, mean=mean(steps)) # calculate mean steps by day
head(dataMeanInt)
nrow(dataMeanInt)
plot(dataMeanInt$date, dataMeanInt$mean, type="l", main="Average Daily # of Steps",
xlab="Day", ylab="Total Steps")
plot(dataMeanInt$interval, dataMeanInt$mean, type="l", main="Average Daily # of Steps",
xlab="Day", ylab="Total Steps")
plot(dataMeanInt$interval, dataMeanInt$mean, type="l", main="Average Daily # of Steps",
xlab="5-min interval", ylab="Total Steps")
plot(dataMeanInt$interval, dataMeanInt$mean, type="l", main="Average Daily Activity Pattern",
xlab="5-min interval", ylab="Total Steps")
tail(data)
plot(dataMeanInt$interval, dataMeanInt$mean, type="l", main="Average Daily Activity Pattern",
xlab="5 minute interval", ylab="Avg. # of Steps")
max(dataMeanInt)
max(dataMeanInt$steps)
?max
max(dataMeanInt$steps, na.rm=FALSE)
dataMeanInt$steps
head(dataMeanInt)
dataMeanInt <- ddply(data, .(interval, steps), summarize, mean=mean(steps)) # calculate mean steps by day
dataMeanInt
head(dataMeanInt)
max(dataMeanInt$steps)
max(dataMeanInt$steps)
summary(dataMeanInt)
subset(dataMeanInt, dataMeanInt$steps=max(dataMeanInt$steps))
?subset
?select
df[dataMeanInt$steps=max(dataMeanInt$steps)]
df[,dataMeanInt$steps==max(dataMeanInt$steps)]
df[dataMeanInt$steps==max(dataMeanInt$steps),]
max <- max(dataMeanInt$steps)
df[dataMeanInt$steps==max,]
dataMeanInt[dataMeanInt$steps==max,]
dataMeanInt[1,dataMeanInt$steps==max,]
dataMeanInt[dataMeanInt$steps==max,]
max <- max(dataMeanInt$steps)
df <- dataMeanInt[dataMeanInt$steps==max,]
df$interval
interval <- df$interval
The interval is `r interval`.
?is.na
is.na(data)
anyNA(data)
data2 <- read.csv("activity.csv") #read data
na <- anyNA(data2) # find NA values
na
is.na(data2)
summary(anyNA(data2))
summary(is.na(data2))
na <- is.na(data2) # find NA values
na
summary(na)
summary(dat)
summary(data)
summary(data2)
str(data2)
is.na(data2)
summary(is.na(data2))
sum(is.na(data2))
na <- sum(is.na(data2)) # returns #'s of missing values
na
require(knitr)
source('~/.active-rstudio-document', echo=TRUE)
plot(dataMeanInt$interval, dataMeanInt$mean, type="l", main="Average Daily Activity Pattern",
xlab="5 minute interval", ylab="Avg. # of Steps")
dataMeanInt$mean
dataSum <- ddply(data, .(date), summarize, total=sum(steps))
hist(dataSum$total, main="Total number of steps taken by day", xlab="Total number of steps by day")
dataMeanInt <- ddply(data, .(interval, steps), summarize, mean=mean(steps)) # calculate mean steps by day
plot(dataMeanInt$interval, dataMeanInt$mean, type="l", main="Average Daily Activity Pattern",
xlab="5 minute interval", ylab="Avg. # of Steps")
plot(dataMeanInt$interval, dataMeanInt$mean, type="l", main="Average Daily Activity Pattern",
xlab="5 minute interval", ylab="Avg. # of Steps")
head(dataMeanInt)
tail(dataMeanInt)
dataMeanInt <- ddply(data, .(interval), summarize, mean=mean(steps)) # calculate mean steps by day
plot(dataMeanInt$interval, dataMeanInt$mean, type="l", main="Average Daily Activity Pattern",
xlab="5 minute interval", ylab="Avg. # of Steps")
dataMeanInt2 <- ddply(data, .(interval), summarize, mean=mean(steps)) # calculate mean steps by day
max <- max(dataMeanInt2$steps) # determine max steps
dataMeanInt2 <- ddply(data, .(interval steps), summarize, mean=mean(steps)) # calculate mean steps by day
max <- max(dataMeanInt2$steps) # determine max steps
dataMeanInt2 <- ddply(data, .(interval, steps), summarize, mean=mean(steps)) # calculate mean steps by day
max <- max(dataMeanInt2$steps) # determine max steps
df <- dataMeanInt2[dataMeanInt2$steps==max,] # create dataframe with max steps and interval
interval <- df$interval
interval
interval <- df$interval
dataMedian
summary(dataMedian)
summary(data)
?recode
?rowMeans
rowMeans(data2,na.rm=TRUE)
?weekdays()
weekday <- weekdays(data$date)
summary(weekday)
head(weekday)
weekend <- -weekdays(data$date)
weekend <- 1-weekdays(data$date)
?subset
weekday <- subset(data, select=weekdays(data$date))
summary(data$date)
weekday <- subset(data, select=weekdays(date))
str(data)
str(weekdays(data$date))
?weekdays
weekdays<- weekdays(data)
weekdays<- weekdays(data$date)
summary(weekdays)
nrow(weekdays)
hist(data2Sum$total, main="Total number of steps taken by day",
xlab="Total number of steps by day")
hist(dataSum$total, main="Total number of steps taken by day", xlab="Total number of steps by day")
plot(dataMeanInt$interval, dataMeanInt$mean, type="l", main="Average Daily Activity Pattern",
xlab="5 minute interval", ylab="Avg. # of Steps")
?plot
