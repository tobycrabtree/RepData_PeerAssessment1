title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
## prune tree
treePrune<- prune.tree(treeData, best=11)
## predict
trainPredictions <- predict(treeData, trainData)
testPredictions <- predict(treeData, testData)
## tables show resubstitution error in training and testing sets
table(trainData$Long.term.corporate.credit.rating, predict(treePrune, type="class")) # training set
table(testData$Long.term.corporate.credit.rating, testPredictions) # test set
## plot figure
plot(treePrune)
title(main="Pruned Tree for Ratings")
text(treePrune, cex=0.75, use.n=TRUE)
head(data)
str(data)
summary(data$Modifiers.active)
dir()
setwd("~/Documents/RepData_PeerAssessment1")
dir()
dataSum <- ddply(data, .(date), summarize, total=sum(steps))
```{r}
require(knitr)
data <- read.csv("activity.csv") #read data
summary(data) # review data
data$date <- as.Date(data$date,"%Y-%m-%d") # transform dates
data <- na.omit(data) # remove missing data
```{r fig.width=7, fig.height=6}
require(plyr) # load required plyr package
dataSum <- ddply(data, .(date), summarize, total=sum(steps))
hist(dataSum$total, main="Total number of steps taken by day", xlab="Total number of steps by day")
dataMean <- ddply(data, .(date), summarize, mean=mean(steps)) # calculate mean steps by day
dataMedian <- ddply(data, .(date), summarize, median=median(steps)) # calculate mean steps by day
dataMean
dataMedian
```
## What is the average daily activity pattern?
```{r fig.width=7, fig.height=6}
require(plyr) # load required plyr package
dataMeanInt <- ddply(data, .(interval), summarize, mean=mean(steps)) # calculate mean steps by day
plot(dataMeanInt$interval, dataMeanInt$mean, type="l", main="Average Daily Activity Pattern",
xlab="5 minute interval", ylab="Avg. # of Steps")
dataMeanInt2 <- ddply(data, .(interval, steps), summarize, mean=mean(steps)) # calculate mean steps by day
max <- max(dataMeanInt2$steps) # determine max steps
df <- dataMeanInt2[dataMeanInt2$steps==max,] # create dataframe with max steps and interval
interval <- df$interval
interval ## returns 5 minute interval
```
## Inputting missing values
```{r}
data2 <- read.csv("activity.csv") #read data
na <- sum(is.na(data2)) # returns #'s of missing values
na
# fill in missing values with mean and create a new dataset
data2$steps[is.na(data2$steps)] <- ????
# create a histogram
data2Sum <- ddply(data2, .(date), summarize, total=sum(steps))
hist(data2Sum$total, main="Total number of steps taken by day",
xlab="Total number of steps by day")
data2Mean <- ddply(data2Sum, .(date), summarize, mean=mean(steps))
data2Median <- ddply(data2Sum, .(date), summarize, median=median(steps))
data2Mean
data2Median
```
The total missing values is `r na`.
## Are there differences in activity patterns between weekdays and weekends?
```{r}
weekday <- subset(data, select=weekdays(date))
weekend <-
```
```{r fig.width=7, fig.height=6}
require(plyr) # load required plyr package
dataMeanInt <- ddply(data, .(interval), summarize, mean=mean(steps)) # calculate mean steps by day
dev.copy(png,"avgdailyactivity.png")
plot(dataMeanInt$interval, dataMeanInt$mean, type="l", main="Average Daily Activity Pattern",
xlab="5 minute interval", ylab="Avg. # of Steps")
dev.off()
dataMeanInt2 <- ddply(data, .(interval, steps), summarize, mean=mean(steps)) # calculate mean steps by day
max <- max(dataMeanInt2$steps) # determine max steps
df <- dataMeanInt2[dataMeanInt2$steps==max,] # create dataframe with max steps and interval
interval <- df$interval
interval ## returns 5 minute interval
?hist
hist(dataSum$total, main="Total number of steps taken by day",
xlab="Total number of steps by day", col="white")
```{r fig.width=7, fig.height=6}
require(plyr) # load required plyr package
dataSum <- ddply(data, .(date), summarize, total=sum(steps))
hist(dataSum$total, main="Total number of steps taken by day",
xlab="Total number of steps by day", col="white")
dataMean <- ddply(data, .(date), summarize, mean=mean(steps)) # calculate mean steps by day
dataMedian <- ddply(data, .(date), summarize, median=median(steps)) # calculate mean steps by day
dataMean
dataMedian
```
dataSum <- ddply(data, .(date), summarize, total=sum(steps))
dev.copy(png,"totalsteps.png")
hist(dataSum$total, main="Total number of steps taken by day",
xlab="Total number of steps by day", col="white")
dev.off()
dataMean <- ddply(data, .(date), summarize, mean=mean(steps)) # calculate mean steps by day
dataMedian <- ddply(data, .(date), summarize, median=median(steps)) # calculate mean steps by day
dataMean
dataMedian
summary(dataMeanInt2)
summary(data2)
data2$steps[data2$steps==NA] <- mean(data2$steps)
summary(data2)
data2$steps==NA
data2$steps[data2$steps==NA] <- mean(data2$steps)
nrow(data2$steps)
nrow(data2)
nrow(data)
x<-data$steps==NA
nrow(x)
x<-data2$steps==NA
nrow(x)
data2 <- read.csv("activity.csv") #re-read data as previously removed missing values
na <- sum(is.na(data2)) # returns #'s of missing values
na
data2 <- read.csv("activity.csv") #re-read data as previously removed missing values
sum(is.na(data2)) # returns #'s of missing values
mean(data2$steps)
summary(data2$steps)
mean(data2$steps)
steps <- data2$steps
mean(steps)
str(steps)
mean(data2$steps, na.rm=TRUE)
data2$steps[is.na(data2$steps)] <- mean(data2$steps, na.rm=TRUE)
summary(data2)
data2Sum <- ddply(data2, .(date), summarize, total=sum(steps))
hist(data2Sum$total, main="Total number of steps taken by day",
xlab="Total number of steps by day")
data2Mean <- ddply(data2Sum, .(date), summarize, mean=mean(steps))
data2Median <- ddply(data2Sum, .(date), summarize, median=median(steps))
data2Mean
data2Median
data2Mean <- ddply(data2Sum, .(date), summarize, mean=mean(steps))
data2Mean
str(data2Mean)
head(data2)
data2Sum <- ddply(data2, .(date), summarize, total=sum(steps))
head(data2Sum)
hist(data2Sum$total, main="Total number of steps taken by day",
xlab="Total number of steps by day", col="white")
data2Mean <- ddply(data2Sum, .(date), summarize, mean=mean(total))
data2Median <- ddply(data2Sum, .(date), summarize, median=median(total))
data2Mean
data2Median
nrow(data2Mean)
nrow(data2Median)
nrow(data2)
The total missing values is `r na`.
head(dataSum)
dataMean <- ddply(data, .(date), summarize, mean=mean(total)) # calculate mean steps by day
dataMean <- ddply(dataSum, .(date), summarize, mean=mean(total)) # calculate mean steps by day
dataMean
dataMean <- ddply(data, .(date), summarize, mean=mean(steps)) # calculate mean steps by day
dataMean
head(dataSum)
mean(dataSum$total)
mean(dataSum$total)
median(dataSum$total)
mean(data2Mean$total)
mean(data2Sum$total)
median(data2Sum$total)
hist(dataSum$total, main="Total number of steps taken by day",
xlab="Total number of steps by day", col="white", bg="white")
plot(dataMeanInt$interval, dataMeanInt$mean, type="l", main="Average Daily Activity Pattern",
xlab="5 minute interval", ylab="Avg. # of Steps", bg="white")
df$interval
weekday <- subset(data, select=weekdays(date))
?weekdays()
weekdays(data)
weekdays(data$date)
summary(weekdays(data$date))
nrow(data)
data$day <- weekdays(data$date)
summary(data$day)
str(data)
data$day <- weekdays(data$date)
data$weekends <- data$date=="Saturday"|"Sunday"
data$weekends <- data$date=="Saturday"
data$weekends <- data$day=="Saturday"
summary(data$weekends)
data$weekends <- data$day=="Saturday"|"Sunday"
data$weekends <- data$day=="Saturday"|"Sunday"
str(data)
summary(data)
data$weekends <- data$day=="Saturday"
data$weekends <- data$day=="Sunday"
summary(data)
?subset
dataWeekend <- subset(data, data$date=="Saturday"|"Sunday")
dataWeekend <- subset(data, data$day=="Saturday"|"Sunday")
str(data$day)
d2 <- as.numeric(data$day)
summary(d2)
d2 <- as.logical(data$day)
d2
dataWeekend <- subset(data, data$day=="Saturday"|"Sunday")
dataWeekend <- subset(data, data$day=="Saturday")
dataSat <- subset(data, data$day=="Saturday")
dataSun <- subset(data, data$day=="Sunday")
dataWeekend <- merge(dataSat, dataSun)
nrow(dataWeekend)
head(dataWeekend)
summary(data$day)
x <- subset(data, select = "Saturday":"Sunday")
x <- subset(data, select = c("Saturday","Sunday"))
data$day <- as.Data(data$day)
data$day <- as.Date(data$day)
summary(data)
?weekdays()
data$day <- weekdays(data$date, abbreviate=TRUE) # add day of week to data set
data$day
data$day <- as.factor(data$day)
str(data$day)
data$day <- as.factor(weekdays(data$date, abbreviate=TRUE)) # add day of week to data set
summary(data)
data$day <- as.factor(weekdays(data$date)) # add day of week to data set
str(data)
data$weekends <- data$day==6:7
str(data$weekends)
summary(data$weekends)
?subset
dataWeekday <- subset(data, data$day==6|7)
nrow(dataWeekday)
nrow(data)
head(data)
data$day>5
dataWeekend <- subset(data, data$day=="Saturday"|"Sunday")
summary(data$day)
?select
data2$day <- as.factor(weekdays(data2$date)) # add day of week to data set
data2$day <- (weekdays(data2$date) # add day of week to data set
)
str(data2)
data2$day <- weekdays(data2$date) # add day of week to data set
weekdays(data2$date)
data2$date <- as.Date(data2$date,"%Y-%m-%d") # transform dates
data2$day <- as.factor(weekdays(data2$date)) # add day of week to data set
summary(data2$day)
data2$weekend <- data2$day==c("Saturday","Sunday")
str(data2$weekend)
summary(data2$weekend)
weekend <- c("Saturday","Sunday")
weekend
data2$weekend <- data2$day==weekend
summary(data2$weekend)
data2weekend <- subset(data2, weekend="TRUE")
data2weekday <- subset(data2, weekend="FALSE")
summary(data2weekday)
summary(data2weekend)
data2$date <- as.Date(data2$date,"%Y-%m-%d") # transform dates
data2$day <- as.factor(weekdays(data2$date)) # add day of week to data set
data2$weekend <- data2$day==c("Saturday","Sunday")
data2weekend <- subset(data2, weekend="TRUE")
data2weekday <- subset(data2, weekend="FALSE")
summary(data2weekend)
data2weekend <- subset(data2, weekend=="TRUE")
data2weekday <- subset(data2, weekend=="FALSE")
summary(data2weekend)
summary(data2weekday)
data2weekday <- data.frame[-data2weekend]
data2weekday <- -data2weekend
data2weekday <- data2[-data2weekend,]
data2weekday <- data2-data2weekend
?aggregate
data2Weekday <- subset(data2, weekend<>"TRUE")
summary(data2$weekend)
data2Weekday <- subset(data2, weekend!="TRUE")
summary(data2Weekday)
data2$weekend <- data2$day==c("Saturday","Sunday")
data2Weekend <- subset(data2, weekend=="TRUE")
data2Weekday <- subset(data2, weekend!="TRUE")
?split
x <- split(data2, data2$weekend)
summary(x)
data2$day==c("Saturday","Sunday")
data2$weekday <- data2$day==c("Monday","Tuesday","Wednesday","Thursday","Friday")
data2$weekend <- data2$day==c("Saturday","Sunday")
data2$weekday <- data2$day==c("Monday","Tuesday")
data2$weekday <- data2$day==c("Monday","Tuesday","Wednesday")
data2$weekday <- data2$day==c("Monday","Tuesday","Wednesday","Thursday")
data2$weekday <- data2$day==c("Monday","Tuesday","Wednesday","Thursday","Friday")
summary(data2$day)
summary(data2$weekday)
data2$weekend <- data2$day=="Sunday"
summary(data2$weekend)
data2$date <- as.Date(data2$date,"%Y-%m-%d") # transform dates
data2$day <- as.factor(weekdays(data2$date)) # add day of week to data set
for (i in data2[i,]$day %in% c("Saturday","Sunday")) {
data2[i,]$weekend<-"weekend"
} else{
data2[i,]$weekend<-"weekday"
}
for (i in data2[i,]$day %in% c("Saturday","Sunday")) {
data2[i,]$day<-"weekend"
} else{
data2[i,]$day<-"weekday"
}
data2$date <- as.Date(data2$date,"%Y-%m-%d") # transform dates
data2$day <- as.factor(weekdays(data2$date)) # add day of week to data set
for (i in 1:nrow(data2)) {
if (data2[i,]$day %in% c("Saturday","Sunday")) {
data2[i,]$weekend<-"weekend"
} else{
data2[i,]$weekend<-"weekday"
}
}
summary(data2$weekend)
str(data2$weekend)
data2$weekend <- as.logical(data2$weekend)
summary(data2$weekend)
for (i in 1:nrow(data2)) {
if (data2[i,]$day %in% c("Saturday","Sunday")) {
data2[i,]$weekend<-"weekend"
} else{
data2[i,]$weekend<-"weekday"
}
}
head(data2)
data2Sum2 <- ddply(data2, .(weekend), summarize, total=sum(steps))
head(data2Sum2)
nrow(data2Sum2)
dataMeanInt2 <- ddply(data, .(interval weekend), summarize, mean=mean(steps)) # calculate mean steps by day
plot(dataMeanInt2$interval, dataMeanInt2$mean, type="l", main="Average Daily Activity Pattern",
xlab="5 minute interval", ylab="Avg. # of Steps", bg="white")
require(ggplot2)
qplot(interval, mean, data=dataMeanInt2, type="l", main="Average Daily Activity Pattern",
xlab="5 minute interval", ylab="Avg. # of Steps", bg="white")
summary(dataMeanInt2)
dataMeanInt2 <- ddply(data, .(interval, weekend), summarize, mean=mean(steps)) # calculate mean steps by day
ggplot(dataMeanInt2, aes(interval, steps)) + ggtitle("Average Daily Activity Pattern") +
labs(x="5 minute interval", y="Avg. # of Steps")
data2weekend <- ddply(data2, .(interval, weekend), summarize, mean=mean(steps)) # calculate mean steps by day
ggplot(dataMeanInt2, aes(interval, steps)) + ggtitle("Average Daily Activity Pattern") +
labs(x="5 minute interval", y="Avg. # of Steps")
ggplot(data2weekend, aes(interval, steps)) + ggtitle("Average Daily Activity Pattern") +
labs(x="5 minute interval", y="Avg. # of Steps")
summary(data2weekend)
ggplot(data2weekend, aes(interval, mean)) + ggtitle("Average Daily Activity Pattern") +
labs(x="5 minute interval", y="Avg. # of Steps")
ggplot(data2weekend, aes(interval, mean)) + facet_grid(weekend~.) +
ggtitle("Average Daily Activity Pattern") +
labs(x="5 minute interval", y="Avg. # of Steps")
?ggplot
ggplot(data2weekend, aes(interval, mean)) + geom_point(size=3) + facet_grid(weekend~.) +
ggtitle("Average Daily Activity Pattern") +
labs(x="5 minute interval", y="Avg. # of Steps")
?ggplot
ggplot(data2weekend, aes(interval, mean)) + geom_point(size=3) + facet_grid(.~weekend) +
ggtitle("Average Daily Activity Pattern") +
labs(x="5 minute interval", y="Avg. # of Steps")
ggplot(data2weekend, aes(interval, mean)) + geom_point(size=1) + facet_grid(weekend~.) +
ggtitle("Average Daily Activity Pattern") +
labs(x="5 minute interval", y="Avg. # of Steps")
ggplot(data2weekend, aes(interval, mean)) + geom_line(size=1) + facet_grid(weekend~.) +
ggtitle("Average Daily Activity Pattern") +
labs(x="5 minute interval", y="Avg. # of Steps")
ggplot(data2weekend, aes(interval, mean)) + geom_line(size=1, color="blue") +
facet_grid(weekend~.) +
ggtitle("Average Daily Activity Pattern") +
labs(x="5 minute interval", y="Avg. # of Steps")
ggplot(data2weekend, aes(interval, mean)) + geom_line(color="blue") +
facet_grid(weekend~.) +
ggtitle("Average Daily Activity Pattern") +
labs(x="5 minute interval", y="Avg. # of Steps")
ggplot(data2weekend, aes(interval, mean)) + geom_line(color="blue") +
facet_grid(weekend~.) +
labs(x="Interval", y="Number of Steps")
ggplot(data2weekend, aes(interval, mean)) + geom_line(color="blue" bg="white") +
facet_grid(weekend~.) +
labs(x="Interval", y="Number of Steps")
#Reproducible Research, Project 1
###Tobias Crabtree
###Coursera, August 2014
========================================================
##Loading and preprocessing the data in R
Personal movement activity data was downloaded August 2014 from
https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip
The variables included in this dataset are:
- steps: Number of steps taking in a 5-minute interval (missing values are coded as NA)
- date: The date on which the measurement was taken in YYYY-MM-DD format
- interval: Identifier for the 5-minute interval in which measurement was taken
The dataset is stored in a comma-separated-value (CSV) file and there are a total of 17,568 observations in this dataset.
Transformations to the data include:
- Changed class to dates
- Removed missing data (i.e., steps has 2304 NA's)
```{r}
require(knitr)
data <- read.csv("activity.csv") #read data
summary(data) # review data
data$date <- as.Date(data$date,"%Y-%m-%d") # transform dates
data <- na.omit(data) # remove missing data
```
## What is the mean total number of steps taken per day?
```{r meantotalstep fig.width=7, fig.height=6}
require(plyr) # load required plyr package
dataSum <- ddply(data, .(date), summarize, total=sum(steps))
hist(dataSum$total, main="Total number of steps taken by day",
xlab="Total number of steps by day", col="white", bg="white")
mean(dataSum$total)
median(dataSum$total)
```
## What is the average daily activity pattern?
```{r avgdailyactivity fig.width=7, fig.height=6}
require(plyr) # load required plyr package
dataMeanInt <- ddply(data, .(interval), summarize, mean=mean(steps)) # calculate mean steps by day
plot(dataMeanInt$interval, dataMeanInt$mean, type="l", main="Average Daily Activity Pattern",
xlab="5 minute interval", ylab="Avg. # of Steps", bg="white")
dataMeanInt2 <- ddply(data, .(interval, steps), summarize, mean=mean(steps)) # calculate mean steps by day
max <- max(dataMeanInt2$steps) # determine max steps
df <- dataMeanInt2[dataMeanInt2$steps==max,] # create dataframe with max steps and interval
df$interval ## returns 5 minute interval with the max amount of steps
```
## Inputting missing values
```{r missingvalues}
data2 <- read.csv("activity.csv") #re-read data as previously removed missing values
sum(is.na(data2)) # returns #'s of missing values
# fill in missing values with mean # of steps and create a new dataset
data2$steps[is.na(data2$steps)] <- mean(data2$steps, na.rm=TRUE)
# create a histogram
data2Sum <- ddply(data2, .(date), summarize, total=sum(steps))
hist(data2Sum$total, main="Total number of steps taken by day",
xlab="Total number of steps by day", col="white", bg="white")
mean(data2Sum$total)
median(data2Sum$total)
```
By inputting missing values the mean and median now converge to be the same #.
## Are there differences in activity patterns between weekdays and weekends?
```{r weekends}
require(ggplot2)
data2$date <- as.Date(data2$date,"%Y-%m-%d") # transform dates
data2$day <- as.factor(weekdays(data2$date)) # add day of week to data set
# loop through data set adding a column for weekend or weekday
for (i in 1:nrow(data2)) {
if (data2[i,]$day %in% c("Saturday","Sunday")) {
data2[i,]$weekend<-"weekend"
} else{
data2[i,]$weekend<-"weekday"
}
}
data2weekend <- ddply(data2, .(interval, weekend), summarize, mean=mean(steps)) # calculate mean steps by day
ggplot(data2weekend, aes(interval, mean)) + geom_line(color="blue") +
facet_grid(weekend~.) +
labs(x="Interval", y="Number of Steps")
```
data2$date <- as.Date(data2$date,"%Y-%m-%d") # transform dates
data2$day <- as.factor(weekdays(data2$date)) # add day of week to data set
# loop through data set adding a column for weekend or weekday
for (i in 1:nrow(data2)) {
if (data2[i,]$day %in% c("Saturday","Sunday")) {
data2[i,]$weekend<-"weekend"
} else{
data2[i,]$weekend<-"weekday"
}
}
data2weekend <- ddply(data2, .(interval, weekend), summarize, mean=mean(steps)) # calculate mean steps by day
ggplot(data2weekend, aes(interval, mean)) + geom_line(color="blue") +
facet_grid(weekend~.) +
labs(x="Interval", y="Number of Steps")
data2 <- read.csv("activity.csv") #re-read data as previously removed missing values
data2$date <- as.Date(data2$date,"%Y-%m-%d") # transform dates
data2$day <- as.factor(weekdays(data2$date)) # add day of week to data set
or (i in 1:nrow(data2)) {
if (data2[i,]$day %in% c("Saturday","Sunday")) {
data2[i,]$weekend<-"weekend"
} else{
data2[i,]$weekend<-"weekday"
}
}
head(data2)
nrow(data2)
data2[1,]
data2$weekend <- NA
for (i in 1:nrow(data2)) {
if (data2[i,]$day %in% c("Saturday","Sunday")) {
data2[i,]$weekend<-"weekend"
} else{
data2[i,]$weekend<-"weekday"
}
}
data2weekend <- ddply(data2, .(interval, weekend), summarize, mean=mean(steps)) # calculate mean steps by day
ggplot(data2weekend, aes(interval, mean)) + geom_line(color="blue") +
facet_grid(weekend~.) +
labs(x="Interval", y="Number of Steps")
data2weekend <- ddply(data2, .(interval, weekend), summarize, mean=mean(steps)) # calculate mean steps by day
head(data2weekend)
head(data2)
data2$steps[is.na(data2$steps)] <- mean(data2$steps, na.rm=TRUE)
data2$date <- as.Date(data2$date,"%Y-%m-%d") # transform dates
data2$day <- as.factor(weekdays(data2$date)) # add day of week to data set
data2$weekend <- NA
for (i in 1:nrow(data2)) {
if (data2[i,]$day %in% c("Saturday","Sunday")) {
data2[i,]$weekend<-"weekend"
} else{
data2[i,]$weekend<-"weekday"
}
}
summary(data2)
data2weekend <- ddply(data2, .(interval, weekend), summarize, mean=mean(steps)) # calculate mean steps by day
ggplot(data2weekend, aes(interval, mean)) + geom_line(color="blue") +
facet_grid(weekend~.) +
labs(x="Interval", y="Number of Steps")
ggplot(data2weekend, aes(interval, mean)) + geom_line(color="blue") +
facet_grid(weekend~.) +
labs(x="Interval", y="Number of Steps")
library(knitr)
